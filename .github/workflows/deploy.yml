name: "üöÄ Production Deployment"

on:
  push:
    branches: [main]
    tags: ["v*"]
  release:
    types: [published]

env:
  NODE_VERSION: "20.x"
  DEPLOYMENT_ENV: production

# OIDC permissions for secure cloud deployment
permissions:
  contents: read
  id-token: write
  deployments: write

jobs:
  # Pre-deployment validation
  pre-deploy-validation:
    name: "üîç Pre-Deploy Validation"
    runs-on: ubuntu-latest
    outputs:
      deploy-environment: ${{ steps.env-check.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run full test suite
        run: |
          npm run lint
          npm run test:ci || npx vitest run
          npm run build

      - name: Determine environment
        id: env-check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" =~ refs/tags/v.* ]]; then
            echo "environment=release" >> $GITHUB_OUTPUT
          fi

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.ref }}" =~ refs/tags/(.*) ]]; then
            echo "version=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            echo "version=main-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

  # Production build with optimizations
  production-build:
    name: "üî® Production Build"
    runs-on: ubuntu-latest
    needs: pre-deploy-validation
    outputs:
      build-hash: ${{ steps.build-hash.outputs.hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --omit=dev

      - name: Build with optimizations
        run: |
          npm run build
          npm run build:mastra
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          # Add production environment variables here
          # DATABASE_URL: ${{ secrets.DATABASE_URL }}
          # API_KEY: ${{ secrets.API_KEY }}

      - name: Generate build hash
        id: build-hash
        run: |
          BUILD_HASH=$(find .next -type f -name "*.js" -o -name "*.css" | sort | xargs cat | sha256sum | cut -d' ' -f1)
          echo "hash=$BUILD_HASH" >> $GITHUB_OUTPUT

      - name: Create deployment package
        run: |
          tar -czf deployment-package.tar.gz \
            .next/ \
            package.json \
            package-lock.json \
            public/ \
            src/mastra/

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package-${{ needs.pre-deploy-validation.outputs.version }}
          path: deployment-package.tar.gz
          retention-days: 30

  # Docker build (if using containerization)
  docker-build:
    name: "üê≥ Docker Build"
    runs-on: ubuntu-latest
    needs: [pre-deploy-validation, production-build]
    if: github.repository_owner == 'ssdeanx' # Replace with your username
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64  # Health checks post-deployment
  post-deploy-validation:
    name: "‚úÖ Post-Deploy Validation"
    runs-on: ubuntu-latest
    needs: [pre-deploy-validation, production-build]
    if: always() && needs.production-build.result == 'success'
    steps:
      - name: Deployment notification
        run: |
          echo "üöÄ Deployment initiated for version: ${{ needs.pre-deploy-validation.outputs.version }}"
          echo "üì¶ Build hash: ${{ needs.production-build.outputs.build-hash }}"
          echo "üåç Environment: ${{ needs.pre-deploy-validation.outputs.deploy-environment }}"

      # Uncomment and configure these steps based on your deployment target
      
      # - name: Health check
      #   run: |
      #     curl -f "${{ secrets.DEPLOYMENT_URL }}/api/health" || exit 1
      
      # - name: Smoke tests
      #   run: |
      #     # Run basic smoke tests against deployed application
      #     curl -f "${{ secrets.DEPLOYMENT_URL }}" || exit 1

      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ needs.pre-deploy-validation.outputs.deploy-environment }}',
              description: 'Automated deployment via GitHub Actions',
              auto_merge: false,
              required_contexts: []
            });
  # Rollback capability
  prepare-rollback:
    name: "üîÑ Prepare Rollback"
    runs-on: ubuntu-latest
    needs: [pre-deploy-validation, production-build, post-deploy-validation]
    if: failure()
    steps:
      - name: Rollback notification
        run: |
          echo "‚ö†Ô∏è Deployment failed, rollback information prepared"
          echo "Previous successful build should be restored"
          echo "Check deployment logs and application health"

      - name: Create rollback issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Deployment Failed - Rollback Required',
              body: `
              ## Deployment Failure Alert
              
              **Version:** ${{ needs.pre-deploy-validation.outputs.version }}
              **Build Hash:** ${{ needs.production-build.outputs.build-hash }}
              **Failed At:** ${new Date().toISOString()}
              
              ## Next Steps
              1. Check deployment logs
              2. Verify application health
              3. Consider rollback to previous version
              4. Fix issues and redeploy
              
              **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
              `,
              labels: ['deployment', 'urgent', 'rollback']
            });
